groupify takes the list
rock the counts
for every number in the list
  if the counts at the number
    let the value be the counts at the number
    build the value up
    put the value into the counts at the number
  otherwise
    put 1 into the counts at the number
  yeah
baby
give back the counts, yeah

Absolute takes foo and bar
if foo > bar
give back foo - bar
otherwise
give back bar - foo
yeah
baby

Bubblesort takes list
	n = list + 0
	swapped is true
	while swapped
		swapped is false
		index = 1
		while index < n
			otherIndex = index - 1
			if list at otherIndex is greater than list at index
				let temp be list at otherIndex
				let list at otherIndex be list at index
				let list at index be temp
				swapped is true
			end (if list)
			build index up
		end (while index < n-1)
	end (while swapped)
	give back list
end (Bubblesort)

listen to the line
while the line ain't nothing
rock the lines with the line
listen to the line, baby

rock list0
rock list1

the separator is "   "
for every line in the lines
split the line into the tokens with the separator
let token0 be the tokens at 0
burn token0 with 10
rock list0 with token0
let token1 be the tokens at 1
burn token1 with 10
rock list1 with token1
yeah

let sort0 be bubblesort taking list0
let sort1 be bubblesort taking list1

let limit be sort0 + 0
let total be 0
let index be 0
while index < limit
let val0 be sort0 at index
let val1 be sort1 at index
let value be absolute taking val0 'n' val1
let total be total with value
build index up
end (while)

shout "Part 1: " with total

let the counts be groupify taking sort1
let total be 0
let index be 0
while index < limit
let val0 be sort0 at index
let val1 be the counts at val0
if val1
  shout val0 with ": " with val1
  let the product be val0 times val1
  let total be total with the product
end
build index up
end (while)

shout "part 2: " with total






